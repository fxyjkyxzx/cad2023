<h1>About</h1>
<p><a href="https://github.com/mdecycu/cmsite"> https://github.com/mdecycu/cmsite </a></p>
<p></p>
<h1>Brython</h1>
<p><a href="https://en.wikipedia.org/wiki/Python_(programming_language)">https://en.wikipedia.org/wiki/Python_(programming_language)</a></p>
<h4>Examples:</h4>
<p style="padding-left: 30px;"><a href="https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d">https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d</a></p>
<p style="padding-left: 30px;"><a href="https://www.geeksforgeeks.org/python-programming-examples/">https://www.geeksforgeeks.org/python-programming-examples/</a></p>
<p style="padding-left: 30px;"><a href="https://www.programiz.com/python-programming/examples">https://www.programiz.com/python-programming/examples</a></p>
<p style="padding-left: 30px;"><a href="https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/">https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/</a></p>
<h4>Python Tutorial:</h4>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/">https://docs.python.org/3/tutorial/</a></p>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/introduction.html">An informal introduction to Python</a></p>
<h4>Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍)</h4>
<h4>Variables (<a href="https://github.com/python/cpython/blob/3.11/Lib/keyword.py">Python Keywords</a>)</h4>
<h4>Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解)</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#numbers">Numbers</a> (整數 int(), 浮點數 float())</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#strings">Strings</a> (字串)</h4>
<h4>print (Python 內建函式, <a href="https://docs.python.org/3/library/functions.html#print">print()</a> 函式)</h4>
<p><a href="https://docs.python.org/3/tutorial/controlflow.html">Python control flow tools</a></p>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements">for</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#if-statements">if</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#the-range-function">range</a></h4>
<h4>open</h4>
<h4>read</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#lists">lists</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences">tuples</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries">dictionaries</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions">functions</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/errors.html#exceptions">try ... except</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops">break</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#pass-statements">pass</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/classes.html?highlight=classes">classes</a></h4>
<p>這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 (<a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件).</p>
<p><a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用.</p>
<p>亦即將所有對應的 html 也使用 Brython 產生, 然後寫為 <a href="https://docs.python.org/3/tutorial/classes.html">class</a> 後, 在範例導入時透過 <a href="https://docs.python.org/3/tutorial/classes.html#instance-objects">instance</a> 引用.</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
&lt;/script&gt;</pre>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p>將 iterable 與 iterator <a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438">相關說明</a>, 利用 Brython 與 Ace Editor 整理在這個頁面.</p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<div></div>
<!-- editor2 結束 -->
<h1>網站</h1>
<p><a href="https://s1511.cycu.org:8129">https://s1511.cycu.org:8129</a></p>
<h1>Home Work</h1>
<h2>說明如何利用chat列出各組學員座位表</h2>
<p>先詢問了GPT如何寫學員座位表得到的回覆如下</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">import random

# 學員信息
students = [
    {"name": "學員1", "id": "001"},
    {"name": "學員2", "id": "002"},
    {"name": "學員3", "id": "003"},
    # 添加更多學員信息
]

# 座位布局
num_rows = 4
num_cols = 5

# 隨機排序學員順序
random.shuffle(students)

# 初始化座位表
seating_arrangement = [["空位"] * num_cols for _ in range(num_rows)]

# 分配座位
for i in range(num_rows):
    for j in range(num_cols):
        if students:
            student = students.pop()
            seating_arrangement[i][j] = f"{student['name']} ({student['id']})"
        else:
            break

# 打印座位表
for row in seating_arrangement:
    print(row)</pre>
<p>已經有學員訊息所以我問他我如何把訊息導入</p>
<p>我得到的回覆如下</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">import requests
from bs4 import BeautifulSoup
import random

# 獲取網頁內容
url = "你的網址"
response = requests.get(url)

# 檢查請求是否成功
if response.status_code == 200:
    # 使用 BeautifulSoup 解析網頁內容
    soup = BeautifulSoup(response.text, 'html.parser')

    # 從網頁中提取學員資訊，這部分需要根據網頁結構進行適當的修改
    student_elements = soup.find_all('div', class_='student-info')
    
    # 存儲學員資訊的列表
    students = []
    
    for student_element in student_elements:
        # 解析每個學員資訊的部分，這部分也需要根據網頁結構進行適當的修改
        name = student_element.find('span', class_='name').text
        student_id = student_element.find('span', class_='id').text
        
        # 將學員資訊添加到列表中
        students.append({"name": name, "id": student_id})

    # 座位布局
    num_rows = 4
    num_cols = 5

    # 隨機排序學員順序
    random.shuffle(students)

    # 初始化座位表
    seating_arrangement = [["空位"] * num_cols for _ in range(num_rows)]

    # 分配座位
    for i in range(num_rows):
        for j in range(num_cols):
            if students:
                student = students.pop()
                seating_arrangement[i][j] = f"{student['name']} ({student['id']})"
            else:
                break

    # 打印座位表
    for row in seating_arrangement:
        print(row)
else:
    print(f"無法獲取網址內容。狀態碼: {response.status_code}")</pre>
<p>把網頁帶入執行後出現錯誤因此我再去問GPT得到的修正結果如下</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">import requests
import random

你的程式碼中使用了 requests.get(url) 來獲取網頁內容，但似乎該網址返回的是文本檔 (txt 檔案)，而不是 HTML。因此，使用 BeautifulSoup 解析文本檔時，不需要使用 'html.parser'

# 獲取文本檔內容
url = "https://mde.tw/cadnote/downloads/2a_w12_seat.txt"
response = requests.get(url)

# 檢查請求是否成功
if response.status_code == 200:
    # 將文本內容按行分割
    lines = response.text.splitlines()

    # 存儲學員資訊的列表
    students = []

    # Process each line of the file content
    for line in lines:
        # Split each line using tabs
        elements = line.split("\t")

        # If the line contains seat information
        if len(elements) == 2 and "(" in elements[1]:
            # Extract student number and seat information
            stud_num = elements[0].strip()
            seat_info = elements[1].strip()

            # Add student number and seat information to the list
            students.append({"name": f"座位號: {seat_info}", "id": f"學號: {stud_num}"})

    # 座位布局
    num_rows = 4
    num_cols = 5

    # 隨機排序學員順序
    random.shuffle(students)

    # 初始化座位表
    seating_arrangement = [["空位"] * num_cols for _ in range(num_rows)]

    # 分配座位
    for i in range(num_rows):
        for j in range(num_cols):
            if students:
                student = students.pop()
                seating_arrangement[i][j] = f"{student['name']}, {student['id']}"
            else:
                break

    # 打印座位表
    for row in seating_arrangement:
        print(row)
else:
    print(f"無法獲取網址內容。狀態碼: {response.status_code}")</pre>
<p></p>
<p>接著我想把文件裡面的座位座標直接導入</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">import random

# Replace this line with the actual file content
file_content = """
學號1\t座位1
學號2\t座位2
學號3\t座位3
"""

# 存儲學員資訊的列表
students = []

# Process each line of the file content
for line in file_content.splitlines():
    # Split each line using tabs
    elements = line.split("\t")

    # If the line contains seat information
    if len(elements) == 2:
        # Extract student number and seat information
        stud_num = elements[0].strip()
        seat_info = elements[1].strip()

        # Add student number and seat information to the list
        students.append({"name": f"座位號: {seat_info}", "id": f"學號: {stud_num}"})

# 座位布局
num_rows = 4
num_cols = 5

# 隨機排序學員順序
random.shuffle(students)

# 初始化座位表
seating_arrangement = [["空位"] * num_cols for _ in range(num_rows)]

# 分配座位
for i in range(num_rows):
    for j in range(num_cols):
        if students:
            student = students.pop()
            seating_arrangement[i][j] = f"{student['name']}, {student['id']}"
        else:
            break

# 打印座位表
for row in seating_arrangement:
    print(row)</pre>
<p><span style="background-color: #ff0000;">接下來開始漫長的debug</span></p>
<h3>問題總結</h3>
<p>1.後面發現因為是網頁執行程式</p>
<div class="line number6 index5 alt1"><code class="html plain">url = "你的網址"</code></div>
<div class="line number7 index6 alt2"><code class="html plain">response = requests.get(url)</code></div>
<div class="line number7 index6 alt2"> </div>
<div class="line number7 index6 alt2">所以上面代碼要換成下面的才能訪問及操作網站裡面的信息</div>
<div class="line number7 index6 alt2"></div>
<div class="line number7 index6 alt2"># get output html location<br/>brython_div = document["brython_div1"]<br/>brython_div &lt;= html.P(id="output_table")</div>
<div class="line number7 index6 alt2"></div>
<div class="line number7 index6 alt2">2.</div><h3>成品及附上說明</h3>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false"># Brython code starts
from browser import document, html

# 獲取輸出HTML的位置
brython_div = document["brython_div1"]
brython_div &lt;= html.P(id="output_table")

# 替換這行程式碼，使用實際的檔案內容
file_content = open("https://mde.tw/cadnote/downloads/2a_w12_seat.txt").read()

# 創建一個字典來存儲學號和座位號
seat_map = {}

# 處理檔案內容的每一行
for line in file_content.splitlines():
    # 使用tab分割每一行
    elements = line.split("\t")

    # 如果該行包含座位信息
    if len(elements) == 2 and "(" in elements[1]:
        # 提取學號和座位信息
        stud_num = elements[0].strip()
        seat_info = elements[1].strip()

        # 將學號和座位信息添加到字典中
        seat_map[stud_num] = seat_info

# 檢查 seat_map 是否為空
if not seat_map:
    # 如果未找到座位信息，顯示消息
    document["output_table"].html = "&lt;p&gt;找不到座位信息。&lt;/p&gt;"
else:
    # 查找最大的行和列值
    max_row = max(int(seat_info[1]) for seat_info in seat_map.values())
    max_col = max(int(seat_info[3]) for seat_info in seat_map.values())

    # 初始化二維列表來表示座位安排
    seating_arrangement = [["空位"] * max_col for _ in range(max_row)]

    # 使用學號和座位信息填充座位安排
    for stud_num, seat_info in seat_map.items():
        row = int(seat_info[1]) - 1
        col = int(seat_info[3]) - 1
        seating_arrangement[row][col] = f"座位號: {seat_info}, 學號: {stud_num}"

    # 在HTML文檔中顯示結果
    result_html = "&lt;table&gt;"
    for row in seating_arrangement:
        result_html += "&lt;tr&gt;"
        for cell_content in row:
            result_html += f"&lt;td&gt;{cell_content}&lt;/td&gt;"
        result_html += "&lt;/tr&gt;"
    result_html += "&lt;/table&gt;"

    # 使用結果更新HTML內容
    document["output_table"].html = result_html
# Brython code ends</pre>
<p></p>
<p></p><h2>零件繪製</h2>
<h3>組合圖</h3>
<p><img alt="" height="602" src="/images/組合圖.png" width="800"/></p>
<h3>滑軌</h3>
<p><img alt="" height="639" src="/images/滑軌.png" width="800"/></p>
<h3>底座</h3>
<p><img alt="" height="463" src="/images/底座.png" width="800"/></p>
<h3>接球的碗</h3>
<p><img alt="" height="633" src="/images/碗.png" width="792"/></p>
<h3>支撐柱</h3>
<p><img alt="" height="765" src="/images/未命名.png" width="674"/></p>
<h3>固定座</h3>
<p><img alt="" height="613" src="/images/固定座.png" width="689"/></p>